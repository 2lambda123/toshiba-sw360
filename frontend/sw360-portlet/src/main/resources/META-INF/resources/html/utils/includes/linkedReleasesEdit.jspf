<%--
  ~ Copyright Siemens AG, 2013-2017, 2019. Part of the SW360 Portal Project.
  ~
  ~ This program and the accompanying materials are made
  ~ available under the terms of the Eclipse Public License 2.0
  ~ which is available at https://www.eclipse.org/legal/epl-2.0/
  ~
  ~ SPDX-License-Identifier: EPL-2.0
--%>

<%@ page import="org.eclipse.sw360.datahandler.thrift.MainlineState" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.ReleaseRelationship" %>


<portlet:resourceURL var="viewReleaseURL">
    <portlet:param name="<%=PortalConstants.ACTION%>" value="<%=PortalConstants.VIEW_LINKED_RELEASES%>"/>
    <portlet:param name="<%=PortalConstants.PROJECT_ID%>" value="${project.id}"/>
</portlet:resourceURL>

<h4 class="mt-4"><liferay-ui:message key="linked.releases" /></h4>
<table class="table edit-table five-columns-with-actions" id="LinkedReleasesInfo">
    <thead>
        <tr>
            <th><liferay-ui:message key="release.name" /></th>
            <th><liferay-ui:message key="release.version" /></th>
            <th><liferay-ui:message key="release.relation" /> <sw360:DisplayEnumInfo type="<%=ReleaseRelationship.class%>"/></th>
            <th><liferay-ui:message key="project.mainline.state" /> <sw360:DisplayEnumInfo type="<%=MainlineState.class%>"/></th>
            <th><liferay-ui:message key="comments" /></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <jsp:include page="/html/utils/ajax/linkedReleasesAjax.jsp" />

    </tbody>
</table>

<button type="button" class="btn btn-secondary" id="addLinkedReleasesToReleaseButton"><liferay-ui:message key="add.releases" /></button>

<div class="dialogs">
    <div id="deleteLinkedReleaseDialog" class="modal fade" tabindex="-1" role="dialog">
		<div class="modal-dialog modal-lg modal-dialog-centered modal-danger" role="document">
		    <div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">
					<clay:icon symbol="question-circle" />
					<liferay-ui:message key="delete.link.to.release" />
				</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
				<div class="modal-body">
			        <p>
                        <liferay-ui:message key="do.you.really.want.to.remove.the.link.to.release.x" />
                    </p>
				</div>
			    <div class="modal-footer">
			        <button type="button" class="btn btn-light" data-dismiss="modal"><liferay-ui:message key="cancel" /></button>
			        <button type="button" class="btn btn-danger"><liferay-ui:message key="delete.link" /></button>
			    </div>
			</div>
		</div>
	</div>
</div>

<script>
    AUI().use('liferay-portlet-url', function () {
        var PortletURL = Liferay.PortletURL;
        var releaseWithRelationArray = [];
        var oldSelect = "";
        var newSelect = "";
        require(['jquery', 'modules/dialog'], function($, dialog) {
            $('#LinkedReleasesInfo').on('click', 'svg[data-row-id]', function(event) {
                var rowId = $(event.currentTarget).data().rowId,
                    release = $(event.currentTarget).data().releaseName;
                dialog.open('#deleteLinkedReleaseDialog', {
                    release: release
                }, function(submit, callback) {
                    $('#' + rowId).remove();
                    callback(true);
                });
            });

            $('.releaseVersion').on('focus',function(event) {
                oldSelect = $(this).val();
            });
            $('.releaseVersion').on('change',function(event) {
                newSelect = $(this).val();
            });

            $('.load-release').on('click', getSubLinkedRelease);

            function getSubLinkedRelease() {
               let releaseId = $(this).closest('tr').find('select').eq(0).val();
               let displayingRelease=[];
               $('.releaseVersion').each(function() { displayingRelease.push($(this).val()); });
               if(oldSelect != "" && newSelect != "") {
                   if (oldSelect != newSelect) {
                       let newSelectExisted = releaseWithRelationArray.find(obj => {
                          return obj.releaseId === releaseId;
                       });

                       let oldSelectExisted = releaseWithRelationArray.find(obj => {
                          return obj.releaseId === oldSelect;
                       });
                       console.log(newSelectExisted);
                       console.log(oldSelectExisted);
                       if (newSelectExisted == null || newSelectExisted == undefined) {
                           console.log(newSelect);
                           jQuery.ajax({
                                type: 'POST',
                                url: '<%=viewReleaseURL%>',
                                data: {
                                    '<portlet:namespace/><%=PortalConstants.WHAT%>': '<%=PortalConstants.FIND_SUB_LINKED_RELEASE%>',
                                    '<portlet:namespace/><%=PortalConstants.RELEASE_ID%>': releaseId,
                                },
                                cache: false,
                                success: async function (body) {
                                   let subLinkedReleaseIds = [];
                                   subLinkedReleaseIds = body.result;
                                   let releaseWithRelation = {
                                        "releaseId": newSelect,
                                        "subLinkedReleaseIds": subLinkedReleaseIds
                                   };
                                   if(subLinkedReleaseIds.length > 0) {
                                       releaseWithRelationArray.push(releaseWithRelation);
                                   }
                                   console.log(releaseWithRelationArray);
                                   if (subLinkedReleaseIds.length > 0) {
                                       await releaseContentFromAjax('<%=PortalConstants.LIST_NEW_LINKED_RELEASES%>', subLinkedReleaseIds, function(result) {
                                           $('#LinkedReleasesInfo tbody').append(result);
                                       });
                                   }
                                   else {
                                       console.log("Ko co gi ca");
                                   }
                                },
                                error: function () {
                                    console.log("ERROR");
                                }
                            });
                       }

                       if (oldSelectExisted != null || oldSelectExisted != undefined) {
                            let isOnScreen = displayingRelease.filter((obj) => obj == oldSelect).length;
                            console.log("================="+isOnScreen);
                            if (isOnScreen == 0) {
                                for (let temp of oldSelectExisted.subLinkedReleaseIds){
                                    $('#releaseVersion option[value="'+temp+'"][selected]').closest('tr').remove();
                                    releaseWithRelationArray = releaseWithRelationArray.filter(function( obj ) {
                                           return obj.releaseId !== oldSelectExisted.releaseId;
                                    });
                                }
                            }
                       }
                   }
                }
                else if (oldSelect == "" && newSelect == "") {
                   let releaseId = $(this).closest('tr').find('select').eq(0).val();
                   let existed = releaseWithRelationArray.find(obj => {
                          return obj.releaseId === releaseId;
                   });
                   if (existed == undefined || existed == null) {
                       jQuery.ajax({
                            type: 'POST',
                            url: '<%=viewReleaseURL%>',
                            data: {
                                '<portlet:namespace/><%=PortalConstants.WHAT%>': '<%=PortalConstants.FIND_SUB_LINKED_RELEASE%>',
                                '<portlet:namespace/><%=PortalConstants.RELEASE_ID%>': releaseId,
                            },
                            cache: false,
                            success: async function (body) {
                               let subLinkedReleaseIds = [];
                               subLinkedReleaseIds = body.result;
                               let releaseWithRelation = {
                                    "releaseId": releaseId,
                                    "subLinkedReleaseIds": subLinkedReleaseIds
                               };
                               if(subLinkedReleaseIds.length > 0) {
                                    releaseWithRelationArray.push(releaseWithRelation);
                               }
                               console.log(releaseWithRelationArray);
                               if (subLinkedReleaseIds.length > 0) {
                                   await releaseContentFromAjax('<%=PortalConstants.LIST_NEW_LINKED_RELEASES%>', subLinkedReleaseIds, function(result) {
                                       $('#LinkedReleasesInfo tbody').append(result);
                                   });
                               }
                               else {
                                   console.log("Ko co gi ca");
                               }

                               $('.load-release').each(function() {$(this).bind('click',getSubLinkedRelease)});
                            },
                            error: function () {
                                console.log("ERROR");
                            }
                        });
                   }
                }
                  $('.load-release').each(function() {
                      $(this).unbind('click');
                      console.log($(this));
                 });
                  $('.load-release').each(function() {$(this).bind('click',getSubLinkedRelease)});
            }

            function releaseContentFromAjax(what, where, callback) {
                return new Promise(function(resolve, reject) {
                    jQuery.ajax({
                        type: 'POST',
                        url: '<%=viewReleaseURL%>',
                        data: {
                            '<portlet:namespace/><%=PortalConstants.WHAT%>': what,
                            '<portlet:namespace/><%=PortalConstants.WHERE%>': where
                        },
                        success: function (data) {
                            callback(data);
                            resolve(data);
                        },
                        error: function() {
                            reject("error");
                        }
                    });
                });
            }
        });
    });
</script>
