<%--
  ~ Copyright Siemens AG, 2013-2017, 2019. Part of the SW360 Portal Project.
  ~
  ~ This program and the accompanying materials are made
  ~ available under the terms of the Eclipse Public License 2.0
  ~ which is available at https://www.eclipse.org/legal/epl-2.0/
  ~
  ~ SPDX-License-Identifier: EPL-2.0
--%>

<%@ page import="org.eclipse.sw360.datahandler.thrift.MainlineState" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.ReleaseRelationship" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.components.ReleaseLink" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.ProjectReleaseRelationship" %>

<portlet:resourceURL var="viewReleaseURL">
    <portlet:param name="<%=PortalConstants.ACTION%>" value="<%=PortalConstants.VIEW_LINKED_RELEASES%>"/>
    <portlet:param name="<%=PortalConstants.PROJECT_ID%>" value="${project.id}"/>
</portlet:resourceURL>

<h4 class="mt-4"><liferay-ui:message key="linked.releases" /></h4>
<table class="table edit-table five-columns-with-actions" id="LinkedReleasesInfo">
    <thead>
        <tr>
            <th><liferay-ui:message key="release.name" /></th>
            <th><liferay-ui:message key="release.version" /></th>
            <th><liferay-ui:message key="release.relation" /> <sw360:DisplayEnumInfo type="<%=ReleaseRelationship.class%>"/></th>
            <th><liferay-ui:message key="project.mainline.state" /> <sw360:DisplayEnumInfo type="<%=MainlineState.class%>"/></th>
            <th><liferay-ui:message key="comments" /></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <jsp:include page="/html/utils/ajax/linkedReleasesAjax.jsp" />
    </tbody>
</table>
<input type="hidden" id="releaseRelationTree" name="<portlet:namespace/><%=Project._Fields.RELEASE_RELATION_TREE%>" />
<button type="button" class="btn btn-secondary" id="addLinkedReleasesToReleaseButton"><liferay-ui:message key="add.releases" /></button>

<div class="dialogs">
    <div id="deleteLinkedReleaseDialog" class="modal fade" tabindex="-1" role="dialog">
		<div class="modal-dialog modal-lg modal-dialog-centered modal-danger" role="document">
		    <div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">
					<clay:icon symbol="question-circle" />
					<liferay-ui:message key="delete.link.to.release" />
				</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
				<div class="modal-body">
			        <p>
                        <liferay-ui:message key="do.you.really.want.to.remove.the.link.to.release.x" />
                    </p>
				</div>
			    <div class="modal-footer">
			        <button type="button" class="btn btn-light" data-dismiss="modal"><liferay-ui:message key="cancel" /></button>
			        <button type="button" class="btn btn-danger"><liferay-ui:message key="delete.link" /></button>
			    </div>
			</div>
		</div>
	</div>
</div>

<script>
    AUI().use('liferay-portlet-url', function () {
        var PortletURL = Liferay.PortletURL;
        require(['jquery', 'modules/dialog'], function($, dialog) {
            var releaseWithRelationArray = [];
            let releaseId = "";
            let projectId = "${project.id}";
            let releaseWithRelations = [];
            let layer = 1;
            let releaseWithRelationsString = "";
            function getContent() {
                return new Promise(function(resolve, reject) {
                    jQuery.ajax({
                           type: 'POST',
                           url: '<%=viewReleaseURL%>',
                           data: {
                               '<portlet:namespace/><%=PortalConstants.WHAT%>': '<%=PortalConstants.FIND_SUB_LINKED_RELEASE%>',
                               '<portlet:namespace/><%=PortalConstants.PROJECT_ID%>': projectId,
                           },
                           cache: false,
                           success: function (body) {
                              resolve(body.result);
                           },
                           error: function () {
                               reject("ERROR");
                               console.log("ERROR");
                           }
                    });
                });
            }

            $( document ).ready(async function(event){
                releaseWithRelations = await(getContent());
                if (typeof releaseWithRelations == "string") {
                    releaseWithRelations = JSON.parse(releaseWithRelations);
                }
                releaseWithRelationsString = JSON.stringify(releaseWithRelations);
                $('#releaseRelationTree').val(releaseWithRelationsString);
                displayReleaseRelationShip();
            });

            async function displayReleaseRelationShip() {
                for(let releaseObj of releaseWithRelations) {
                    let temp = [];
                    temp.push(releaseObj.releaseId);
                    let newRow = await releaseContentFromAjax('<%=PortalConstants.CREATE_LINKED_RELEASE_ROW%>', temp, "", 0);
                    $('#LinkedReleasesInfo tbody').append(newRow);
                    $('#LinkedReleasesInfo').find('tr').last().find('#projectReleaseVersion').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ReleaseLink._Fields.ID%>');
                    $('#LinkedReleasesInfo').find('tr').last().find('#projectReleaseRelation').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ProjectReleaseRelationship._Fields.RELEASE_RELATION%>');
                    $('#LinkedReleasesInfo').find('tr').last().find('#mainlineState').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ProjectReleaseRelationship._Fields.MAINLINE_STATE%>');
                    $('#LinkedReleasesInfo').find('tr').last().find('#releaseComment').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ProjectReleaseRelationship._Fields.COMMENT%>');

                    let parentId = releaseObj.releaseId;
                    let releases = releaseObj.releaseLink;
                    layer = 1;
                    recursiveTree(layer, parentId, releases);
                }
            }

            async function recursiveTree(layer, parentId, releases){
                let releaseIds = [];
                for (let release of releases) {
                    releaseIds.push(release.releaseId);
                }
                let newRows = await releaseContentFromAjax('<%=PortalConstants.CREATE_LINKED_RELEASE_ROW%>', releaseIds, parentId, layer);
                $('#releaseLinkRow'+parentId+'[data-layer="'+(layer-1)+'"]').last().after(newRows);
                layer++;
                for (let release of releases) {
                    recursiveTree(layer, release.releaseId, release.releaseLink);
                }
            }

            $('#LinkedReleasesInfo').on('click', 'svg[data-row-id]', function(event) {
                var rowId = $(event.currentTarget).data().rowId,
                    release = $(event.currentTarget).data().releaseName;
                dialog.open('#deleteLinkedReleaseDialog', {
                    release: release
                }, function(submit, callback) {
                    $('#' + rowId).remove();
                    callback(true);
                });
            });

            $('#LinkedReleasesInfo').on('click', '.load-release', displayRelationOfNode);
            $('#LinkedReleasesInfo').on('change', '.releaseVersion', changeReleaseIdInNode);
            $('#LinkedReleasesInfo').on('change', '.projectReleaseRelation', changeReleaseRelation);
            $('#LinkedReleasesInfo').on('change', '.mainlineState', changeMainLineState);

            async function displayRelationOfNode(){
               let newSelect = $(this).closest('tr').find('select').eq(0).val();
               let oldSelect = $(this).closest('tr').find('select').eq(0).attr('data-old');
               let currentLayer =  $(this).closest('tr').attr('data-layer');
               let parentNode = $(this).closest('tr').attr('parent-node');

               let newNode = await getLinkedReleaseOfNode('<%=PortalConstants.FIND_LINKED_RELEASE_OF_NODE%>',newSelect);
               let i=0;
               let trace = [];
               trace.unshift(newSelect);
               for(let layer = currentLayer - 1; layer >= 0; layer-- ) {
                    trace.unshift($(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').find('select').eq(0).val());
                    parentNode =  $(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').attr('parent-node');
               }
               replaceNode(releaseWithRelations, i, trace, newNode[0], newSelect, oldSelect);
               $('#releaseRelationTree').val(JSON.stringify(releaseWithRelations));
               $('#LinkedReleasesInfo tbody').empty();
               displayReleaseRelationShip();
            }

            function replaceNode(releasesLinked, i, trace, newNode, newSelect, oldSelect){
                for(let index = 0; index < releasesLinked.length; index++){
                    if(releasesLinked[index].releaseId === trace[i]){
                       if(i === (trace.length - 1)) {
                            let hasSameId=[];
                            console.log(newSelect)
                            for(let pos = 0; pos < releasesLinked.length; pos++) {
                                if(releasesLinked[pos].releaseId == trace[trace.length-1]){
                                    hasSameId.push(pos);
                                }
                            }
                            console.log(hasSameId);
                            releasesLinked[hasSameId[0]] = newNode;
                            hasSameId.shift();
                            if(hasSameId.length >= 1) {
                                for(let pos of hasSameId) {
                                     releasesLinked.splice(pos,1);
                                }
                            }
                            return;
                       }
                        i++;
                        replaceNode(releasesLinked[index].releaseLink, i, trace, newNode, newSelect, oldSelect);
                        break;
                    }
                }
            }

            function changeReleaseIdInNode() {
               let newSelect = $(this).closest('tr').find('select').eq(0).val();
               let oldSelect = $(this).closest('tr').find('select').eq(0).attr('data-old');
               let currentLayer =  $(this).closest('tr').attr('data-layer');
               let parentNode = $(this).closest('tr').attr('parent-node');

               let i=0;
               let trace = [];
               trace.unshift(oldSelect);

               for(let layer = currentLayer - 1; layer >= 0; layer-- ) {
                    trace.unshift($(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').find('select').eq(0).val());
                    parentNode =  $(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').attr('parent-node');
               }

               replaceValueOfNode(releaseWithRelations, i, trace, newSelect, oldSelect, "", "releaseId");
               $('#releaseRelationTree').val(JSON.stringify(releaseWithRelations));
               $(this).closest('tr').find('select').eq(0).attr('data-old',newSelect);
            }

            function changeReleaseRelation() {
               let newSelect = $(this).closest('tr').find('select').eq(0).val();
               let currentLayer =  $(this).closest('tr').attr('data-layer');
               let parentNode = $(this).closest('tr').attr('parent-node');
               let value = $(this).closest('tr').find('select').eq(1).val();
               let i=0;
               let trace = [];
               trace.unshift(newSelect);

               for(let layer = currentLayer - 1; layer >= 0; layer-- ) {
                    trace.unshift($(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').find('select').eq(0).val());
                    parentNode =  $(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').attr('parent-node');
               }
               replaceValueOfNode(releaseWithRelations, i, trace, "", "", value, "releaseRelation");
               $('#releaseRelationTree').val(JSON.stringify(releaseWithRelations));
            }

            function changeMainLineState() {
               let newSelect = $(this).closest('tr').find('select').eq(0).val();
               let currentLayer =  $(this).closest('tr').attr('data-layer');
               let parentNode = $(this).closest('tr').attr('parent-node');
               let value = $(this).closest('tr').find('select').eq(2).val();
               let i=0;
               let trace = [];
               trace.unshift(newSelect);

               for(let layer = currentLayer - 1; layer >= 0; layer-- ) {
                    trace.unshift($(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').find('select').eq(0).val());
                    parentNode =  $(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').attr('parent-node');
               }
               replaceValueOfNode(releaseWithRelations, i, trace, "", "", value, "mainLineState");
               $('#releaseRelationTree').val(JSON.stringify(releaseWithRelations));
            }


            function replaceValueOfNode(releaseWithRelations, i, trace, newSelect, oldSelect, value, type) {
                for(let index = 0; index < releaseWithRelations.length; index++){
                    if(releaseWithRelations[index].releaseId === trace[i]){
                        if(i === (trace.length - 1)) {
                            if (type == "releaseId") {
                                if(newSelect != oldSelect) {
                                    releaseWithRelations[index].releaseId = newSelect;
                                    releaseWithRelations[index].hasChange = true;
                                    return;
                                } else {
                                    releaseWithRelations[index].releaseId = oldSelect;
                                    releaseWithRelations[index].hasChange = false;
                                    return;
                                }
                            } else if (type == "releaseRelation") {
                                releaseWithRelations[index].releaseRelationship = value;
                            } else if (type == "mainLineState") {
                                releaseWithRelations[index].mainLineState = value;
                            }
                        }
                        i++;
                        replaceValueOfNode(releaseWithRelations[index].releaseLink, i, trace, newSelect, oldSelect, value, type);
                        break;
                    }
                }
            }

            function releaseContentFromAjax(what, where, parentId, layer) {
                return new Promise(function(resolve, reject) {
                    jQuery.ajax({
                        type: 'POST',
                        url: '<%=viewReleaseURL%>',
                        data: {
                            '<portlet:namespace/><%=PortalConstants.WHAT%>': what,
                            '<portlet:namespace/><%=PortalConstants.WHERE%>': where,
                            '<portlet:namespace/><%=PortalConstants.PARENT_BRANCH_ID%>': parentId,
                            '<portlet:namespace/><%=PortalConstants.LAYER%>': layer
                        },
                        success: function (data) {
                            resolve(data);
                        },
                        error: function() {
                            console.log("error");
                            reject("");
                        }
                    });
                });
            }

            function getLinkedReleaseOfNode(what, releaseId){
                return new Promise(function(resolve, reject) {
                    jQuery.ajax({
                        type: 'POST',
                        url: '<%=viewReleaseURL%>',
                        data: {
                            '<portlet:namespace/><%=PortalConstants.WHAT%>': what,
                            '<portlet:namespace/><%=PortalConstants.RELEASE_ID%>': releaseId
                        },
                        success: function (body) {
                            resolve(body.result);
                        },
                        error: function() {
                            console.log("error");
                            reject("ERROR");
                        }
                    });
                });
            }
        });
    });
</script>
