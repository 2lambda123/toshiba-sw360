<%--
  ~ Copyright Siemens AG, 2013-2017, 2019. Part of the SW360 Portal Project.
  ~
  ~ This program and the accompanying materials are made
  ~ available under the terms of the Eclipse Public License 2.0
  ~ which is available at https://www.eclipse.org/legal/epl-2.0/
  ~
  ~ SPDX-License-Identifier: EPL-2.0
--%>

<%@ page import="com.liferay.portal.kernel.portlet.PortletURLFactoryUtil" %>
<%@include file="/html/init.jsp" %>
<%@ page import="org.eclipse.sw360.portal.common.PortalConstants" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.MainlineState" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.ReleaseRelationship" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.components.ReleaseLink" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.ProjectReleaseRelationship" %>
<%@ page import="org.eclipse.sw360.datahandler.thrift.projects.Project" %>

<portlet:resourceURL var="viewReleaseURL">
    <portlet:param name="<%=PortalConstants.ACTION%>" value="<%=PortalConstants.VIEW_LINKED_RELEASES%>"/>
    <portlet:param name="<%=PortalConstants.PROJECT_ID%>" value="${project.id}"/>
</portlet:resourceURL>

<h4 class="mt-4"><liferay-ui:message key="linked.releases" /></h4>
<table class="table edit-table five-columns-with-actions" id="LinkedReleasesInfo">
    <thead>
        <tr>
            <th><liferay-ui:message key="release.name" /></th>
            <th><liferay-ui:message key="release.version" /></th>
            <th><liferay-ui:message key="release.relation" /> <sw360:DisplayEnumInfo type="<%=ReleaseRelationship.class%>"/></th>
            <th><liferay-ui:message key="project.mainline.state" /> <sw360:DisplayEnumInfo type="<%=MainlineState.class%>"/></th>
            <th><liferay-ui:message key="comments" /></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
<input type="hidden" id="releaseRelationTree" name="<portlet:namespace/><%=Project._Fields.RELEASE_RELATION_NETWORK%>" />
<button type="button" class="btn btn-secondary" id="addLinkedReleasesToReleaseButton"><liferay-ui:message key="add.releases" /></button>

<div class="dialogs">
    <div id="deleteLinkedReleaseDialog" class="modal fade" tabindex="-1" role="dialog">
		<div class="modal-dialog modal-lg modal-dialog-centered modal-danger" role="document">
		    <div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">
					<clay:icon symbol="question-circle" />
					<liferay-ui:message key="delete.link.to.release" />
				</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
				<div class="modal-body">
			        <p>
                        <liferay-ui:message key="do.you.really.want.to.remove.the.link.to.release.x" />
                    </p>
				</div>
			    <div class="modal-footer">
			        <button type="button" class="btn btn-light" data-dismiss="modal"><liferay-ui:message key="cancel" /></button>
			        <button type="button" class="btn btn-danger"><liferay-ui:message key="delete.link" /></button>
			    </div>
			</div>
		</div>
	</div>
</div>

<div class="dialogs">
	<div id="searchReleasesDialog" data-title="<liferay-ui:message key="link.releases" />" class="modal fade" tabindex="-1" role="dialog">
		<div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable" role="document">
		    <div class="modal-content">
			<div class="modal-body container">

                    <form>
                        <div class="row form-group">
                            <div class="col-6">
                                <input type="text" name="searchrelease" id="searchrelease" placeholder="<liferay-ui:message key="enter.search.text" />" class="form-control" autofocus/>
                            </div>
                            <div class="col">
                                <button type="button" class="btn btn-secondary" id="searchbuttonrelease"><liferay-ui:message key="search" /></button>

                                <core_rt:if test="${enableSearchForReleasesFromLinkedProjects}">
                                    <button type="button" class="btn btn-secondary" id="linkedReleasesButton"><liferay-ui:message key="releases.of.linked.projects" /></button>
                                </core_rt:if>
                            </div>
                        </div>

                        <div id="search-release-form">
                            <div class="spinner text-center" style="display: none;">
                                <div class="spinner-border" role="status">
                                    <span class="sr-only"><liferay-ui:message key="loading" /></span>
                                </div>
                            </div>

                            <table id="releaseSearchResultsTable" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th><liferay-ui:message key="vendor" /></th>
                                        <th><liferay-ui:message key="component.name" /></th>
                                        <th><liferay-ui:message key="release.version" /></th>
                                        <th><liferay-ui:message key="clearing.state" /></th>
                                        <th><liferay-ui:message key="mainline.state" /></th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </form>
				</div>
			    <div class="modal-footer">
		            <button type="button" class="btn btn-light" data-dismiss="modal"><liferay-ui:message key="close" /></button>
			        <button id="selectReleaseButton" type="button" class="btn btn-primary" title="<liferay-ui:message key="link.releases" />"><liferay-ui:message key="link.releases" /></button>
			    </div>
			</div>
		</div>
	</div>
</div>

<script>
    AUI().use('liferay-portlet-url', function () {
        var PortletURL = Liferay.PortletURL;
        require(['jquery', 'modules/dialog', 'bridges/datatables', 'utils/keyboard', /* jquery-plugins */ 'jquery-ui' ], function($, dialog, datatables, keyboard) {
            var $dataTable,
                $dialog;
            let releaseId = "";
            var releaseWithRelations = [];
            let projectId = '${project.id}';
            let layer = 1;
            let releaseWithRelationsString = "[]";
            function getContent() {
                return new Promise(function(resolve, reject) {
                    jQuery.ajax({
                           type: 'POST',
                           url: '<%=viewReleaseURL%>',
                           data: {
                               '<portlet:namespace/><%=PortalConstants.WHAT%>': '<%=PortalConstants.FIND_SUB_LINKED_RELEASE%>',
                               '<portlet:namespace/><%=PortalConstants.PROJECT_ID%>': projectId,
                           },
                           cache: false,
                           success: function (body) {
                              resolve(body.result);
                           },
                           error: function () {
                               reject("ERROR");
                               console.log("ERROR");
                           }
                    });
                });
            }

            $( document ).ready(async function(event){
                releaseWithRelations = await(getContent());
                if (typeof releaseWithRelations == "string") {
                    releaseWithRelations = JSON.parse(releaseWithRelations);
                }
                if(releaseWithRelations == undefined) {
                    releaseWithRelations = [];
                }
                releaseWithRelationsString = JSON.stringify(releaseWithRelations);
                $('#releaseRelationTree').val(releaseWithRelationsString);
                displayReleaseRelationShip();
            });

            async function displayReleaseRelationShip() {
                for(let releaseObj of releaseWithRelations) {
                    let releaseIds = [];
                    let mainlineStates = [];
                    let releaseRelationShips = [];
                    releaseIds.push(releaseObj.releaseId);
                    mainlineStates.push(releaseObj.mainlineState);
                    releaseRelationShips.push(releaseObj.releaseRelationship);

                    let newRow = await releaseRelationFromAjax('<%=PortalConstants.CREATE_LINKED_RELEASE_ROW%>', releaseIds, "", 0, mainlineStates, releaseRelationShips);
                    $('#LinkedReleasesInfo tbody').append(newRow);
                    $('#LinkedReleasesInfo').find('tr').last().find('#projectReleaseVersion').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ReleaseLink._Fields.ID%>');
                    $('#LinkedReleasesInfo').find('tr').last().find('#projectReleaseRelation').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ProjectReleaseRelationship._Fields.RELEASE_RELATION%>');
                    $('#LinkedReleasesInfo').find('tr').last().find('#mainlineState').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ProjectReleaseRelationship._Fields.MAINLINE_STATE%>');
                    $('#LinkedReleasesInfo').find('tr').last().find('#releaseComment').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ProjectReleaseRelationship._Fields.COMMENT%>');

                    let parentId = releaseObj.releaseId;
                    let releases = releaseObj.releaseLink;
                    layer = 1;
                    recursiveNetwork(layer, parentId, releases);
                }
            }

            async function recursiveNetwork(layer, parentId, releases){
                let releaseIds = [];
                let mainlineStates = [];
                let releaseRelationShips = [];
                for (let release of releases) {
                    releaseIds.push(release.releaseId);
                    mainlineStates.push(release.mainlineState);
                    releaseRelationShips.push(release.releaseRelationship)
                }
                let newRows = await releaseRelationFromAjax('<%=PortalConstants.CREATE_LINKED_RELEASE_ROW%>', releaseIds, parentId, layer, mainlineStates, releaseRelationShips);
                $('#releaseLinkRow'+parentId+'[data-layer="'+(layer-1)+'"]').last().after(newRows);
                layer++;
                for (let release of releases) {
                    recursiveNetwork(layer, release.releaseId, release.releaseLink);
                }
            }

            $('#LinkedReleasesInfo').on('click', 'svg[data-row-id]', function(event) {
                var rowId = $(event.currentTarget).data().rowId,
                    release = $(event.currentTarget).data().releaseName;
                dialog.open('#deleteLinkedReleaseDialog', {
                    release: release
                }, function(submit, callback) {
                    $('#' + rowId).remove();
                    callback(true);
                });
            });

            $('#LinkedReleasesInfo').on('click', '.load-release', displayRelationOfNode);
            $('#LinkedReleasesInfo').on('change', '.releaseVersion', changeReleaseIdInNode);
            $('#LinkedReleasesInfo').on('change', '.projectReleaseRelation', changeReleaseRelation);
            $('#LinkedReleasesInfo').on('change', '.mainlineState', changeMainLineState);

            async function displayRelationOfNode(){
               let newSelect = $(this).closest('tr').find('select').eq(0).val();
               let oldSelect = $(this).closest('tr').find('select').eq(0).attr('data-old');
               let currentLayer =  $(this).closest('tr').attr('data-layer');
               let parentNode = $(this).closest('tr').attr('parent-node');

               let newNode = await getLinkedReleaseOfNode('<%=PortalConstants.FIND_LINKED_RELEASE_OF_NODE%>',newSelect);
               let i=0;
               let trace = [];
               trace.unshift(newSelect);
               for(let layer = currentLayer - 1; layer >= 0; layer-- ) {
                    trace.unshift($(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').find('select').eq(0).val());
                    parentNode =  $(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').attr('parent-node');
               }
               replaceNode(releaseWithRelations, i, trace, newNode[0], newSelect, oldSelect);
               $('#releaseRelationTree').val(JSON.stringify(releaseWithRelations));
               $('#LinkedReleasesInfo tbody').empty();
               displayReleaseRelationShip();
            }

            function replaceNode(releasesLinked, i, trace, newNode, newSelect, oldSelect){
                for(let index = 0; index < releasesLinked.length; index++){
                    if(releasesLinked[index].releaseId === trace[i]){
                       if(i === (trace.length - 1)) {
                            let hasSameId=[];
                            console.log(newSelect)
                            for(let pos = 0; pos < releasesLinked.length; pos++) {
                                if(releasesLinked[pos].releaseId == trace[trace.length-1]){
                                    hasSameId.push(pos);
                                }
                            }
                            releasesLinked[hasSameId[0]] = newNode;
                            hasSameId.shift();
                            if(hasSameId.length >= 1) {
                                for(let pos of hasSameId) {
                                     releasesLinked.splice(pos,1);
                                }
                            }
                            return;
                       }
                        i++;
                        replaceNode(releasesLinked[index].releaseLink, i, trace, newNode, newSelect, oldSelect);
                        break;
                    }
                }
            }

            function changeReleaseIdInNode() {
               let newSelect = $(this).closest('tr').find('select').eq(0).val();
               let oldSelect = $(this).closest('tr').find('select').eq(0).attr('data-old');
               let currentLayer =  $(this).closest('tr').attr('data-layer');
               let parentNode = $(this).closest('tr').attr('parent-node');

               let i=0;
               let trace = [];
               trace.unshift(oldSelect);

               for(let layer = currentLayer - 1; layer >= 0; layer-- ) {
                    trace.unshift($(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').find('select').eq(0).val());
                    parentNode =  $(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').attr('parent-node');
               }

               replaceValueOfNode(releaseWithRelations, i, trace, newSelect, oldSelect, "", "releaseId");
               $('#releaseRelationTree').val(JSON.stringify(releaseWithRelations));
               $(this).closest('tr').find('select').eq(0).attr('data-old',newSelect);
            }

            function changeReleaseRelation() {
               let newSelect = $(this).closest('tr').find('select').eq(0).val();
               let currentLayer =  $(this).closest('tr').attr('data-layer');
               let parentNode = $(this).closest('tr').attr('parent-node');
               let value = $(this).closest('tr').find('select').eq(1).val();
               let i=0;
               let trace = [];
               trace.unshift(newSelect);

               for(let layer = currentLayer - 1; layer >= 0; layer-- ) {
                    trace.unshift($(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').find('select').eq(0).val());
                    parentNode =  $(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').attr('parent-node');
               }
               replaceValueOfNode(releaseWithRelations, i, trace, "", "", value, "releaseRelation");
               $('#releaseRelationTree').val(JSON.stringify(releaseWithRelations));
            }

            function changeMainLineState() {
               let newSelect = $(this).closest('tr').find('select').eq(0).val();
               let currentLayer =  $(this).closest('tr').attr('data-layer');
               let parentNode = $(this).closest('tr').attr('parent-node');
               let value = $(this).closest('tr').find('select').eq(2).val();
               let i=0;
               let trace = [];
               trace.unshift(newSelect);

               for(let layer = currentLayer - 1; layer >= 0; layer-- ) {
                    trace.unshift($(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').find('select').eq(0).val());
                    parentNode =  $(this).closest('tr').siblings('#releaseLinkRow'+parentNode+'[data-layer="'+layer+'"]').attr('parent-node');
               }
               replaceValueOfNode(releaseWithRelations, i, trace, "", "", value, "mainLineState");
               $('#releaseRelationTree').val(JSON.stringify(releaseWithRelations));
               console.log(releaseRelations);
            }


            function replaceValueOfNode(releaseWithRelations, i, trace, newSelect, oldSelect, value, type) {
                for(let index = 0; index < releaseWithRelations.length; index++){
                    if(releaseWithRelations[index].releaseId === trace[i]){
                        if(i === (trace.length - 1)) {
                            if (type == "releaseId") {
                                if(newSelect != oldSelect) {
                                    releaseWithRelations[index].releaseId = newSelect;
                                    releaseWithRelations[index].hasChange = true;
                                    return;
                                } else {
                                    releaseWithRelations[index].releaseId = oldSelect;
                                    releaseWithRelations[index].hasChange = false;
                                    return;
                                }
                            } else if (type == "releaseRelation") {
                                releaseWithRelations[index].releaseRelationship = value;
                            } else if (type == "mainLineState") {
                                releaseWithRelations[index].mainlineState = value;
                            }
                        }
                        i++;
                        replaceValueOfNode(releaseWithRelations[index].releaseLink, i, trace, newSelect, oldSelect, value, type);
                        break;
                    }
                }
            }

            function releaseRelationFromAjax(what, where, parentId, layer, mainLineState, releaseRelation) {
                return new Promise(function(resolve, reject) {
                    jQuery.ajax({
                        type: 'POST',
                        url: '<%=viewReleaseURL%>',
                        data: {
                            '<portlet:namespace/><%=PortalConstants.WHAT%>': what,
                            '<portlet:namespace/><%=PortalConstants.WHERE%>': where,
                            '<portlet:namespace/><%=PortalConstants.PARENT_BRANCH_ID%>': parentId,
                            '<portlet:namespace/><%=PortalConstants.LAYER%>': layer,
                            '<portlet:namespace/><%=PortalConstants.MAINLINE_STATE%>': mainLineState,
                            '<portlet:namespace/><%=PortalConstants.RELEASE_RELATION_SHIP%>': releaseRelation
                        },
                        success: function (data) {
                            resolve(data);
                        },
                        error: function() {
                            console.log("error");
                            reject("");
                        }
                    });
                });
            }

            function getLinkedReleaseOfNode(what, releaseId){
                return new Promise(function(resolve, reject) {
                    jQuery.ajax({
                        type: 'POST',
                        url: '<%=viewReleaseURL%>',
                        data: {
                            '<portlet:namespace/><%=PortalConstants.WHAT%>': what,
                            '<portlet:namespace/><%=PortalConstants.RELEASE_ID%>': releaseId
                        },
                        success: function (body) {
                            resolve(body.result);
                        },
                        error: function() {
                            console.log("error");
                            reject("ERROR");
                        }
                    });
                });
            }

            // Search release dialog
            keyboard.bindkeyPressToClick('searchrelease', 'searchbuttonrelease');
            var homeUrl = themeDisplay.getURLHome().replace(/\/web\//, '/group/');
            $('#addLinkedReleasesToReleaseButton').on('click', showReleaseDialog);

            $('.dialogs').on('click','#searchbuttonrelease', function() {
                releaseContentFromAjax('<%=PortalConstants.RELEASE_SEARCH%>', $('#searchrelease').val(), function(data) {
                    if($dataTable) {
                        $dataTable.destroy();
                    }
                    $('#releaseSearchResultsTable tbody').html(data);
                    addLinkToReleaseNameAndVersion();
                    makeReleaseDataTable();
                });
            });
            $('.dialogs').on('click', '#linkedReleasesButton', function() {
                releaseContentFromAjax('<%=PortalConstants.RELEASE_LIST_FROM_LINKED_PROJECTS%>', '', function(data) {
                    if($dataTable) {
                        $dataTable.destroy();
                    }
                    $('#releaseSearchResultsTable tbody').html(data);
                    addLinkToReleaseNameAndVersion();
                    makeReleaseDataTable();
                });
            });
            $('#releaseSearchResultsTable').on('change', 'input', function() {
                $dialog.enablePrimaryButtons($('#releaseSearchResultsTable input:checked').length > 0);
            });

            function showReleaseDialog() {
                if($dataTable) {
                    $dataTable.destroy();
                    $dataTable = undefined;
                }

                $dialog = dialog.open('#searchReleasesDialog', {
                }, function(submit, callback) {
                    var releaseIds = [];

                    $('#releaseSearchResultsTable').find(':checked').each(function () {
                        releaseIds.push(this.value);
                    });
                    for (let releaseId of releaseIds) {
                        let toArray = [];
                        toArray.push(releaseId);
                        addReleaseToTable('<%=PortalConstants.CREATE_LINKED_RELEASE_ROW%>', toArray, "", 0, [0], [0],function(data) {
                              $('#LinkedReleasesInfo tbody').append(data);
                              $('#LinkedReleasesInfo').find('tr').last().find('#projectReleaseVersion').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ReleaseLink._Fields.ID%>');
                              $('#LinkedReleasesInfo').find('tr').last().find('#projectReleaseRelation').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ProjectReleaseRelationship._Fields.RELEASE_RELATION%>');
                              $('#LinkedReleasesInfo').find('tr').last().find('#mainlineState').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ProjectReleaseRelationship._Fields.MAINLINE_STATE%>');
                              $('#LinkedReleasesInfo').find('tr').last().find('#releaseComment').attr('name','<portlet:namespace/><%=Project._Fields.RELEASE_ID_TO_USAGE%><%=ProjectReleaseRelationship._Fields.COMMENT%>');
                        });
                        let selectedRelease = {
                              "setName": true,
                              "setHasChange": false,
                              "releaseLinkSize": 0,
                              "setReleaseRelationship": false,
                              "releaseLinkIterator": "java.util.ArrayList$Itr@582a556d",
                              "hasChange": false,
                              "setReleaseLink": true,
                              "releaseLink": [],
                              "releaseId": releaseId,
                              "releaseRelationship": 0,
                              "setMainlineState": false,
                              "name": "component111",
                              "setReleaseId": true,
                              "mainlineState": 0
                        }
                        releaseWithRelations.push(selectedRelease);
                    }
                    $('#releaseRelationTree').val(JSON.stringify(releaseWithRelations));
                    console.log(releaseWithRelations);
                    callback(true);
                }, function() {
                    this.$.find('.spinner').hide();
                    this.$.find('#releaseSearchResultsTable').hide();
                    this.$.find('#searchrelease').val('');
                    this.enablePrimaryButtons(false);
                });
            }

            function makeReleaseDataTable() {
                $dataTable = datatables.create('#releaseSearchResultsTable', {
                    destroy: true,
                    paging: false,
                    info: false,
                    language: {
                        emptyTable: "<liferay-ui:message key="no.releases.found" />",
                        processing: "<liferay-ui:message key="processing" />",
                        loadingRecords: "<liferay-ui:message key="loading" />"
                    },
                    order: [
                        [2, 'asc']
                    ],
                    select: 'multi+shift'
                }, undefined, [0]);
                datatables.enableCheckboxForSelection($dataTable, 0);
            }

            function releaseContentFromAjax(what, where, callback) {
                $dialog.$.find('.spinner').show();
                $dialog.$.find('#releaseSearchResultsTable').hide();
                $dialog.$.find('#searchbuttonrelease').prop('disabled', true);
                $dialog.$.find('#linkedReleasesButton').prop('disabled', true);
                $dialog.enablePrimaryButtons(false);

                jQuery.ajax({
                    type: 'POST',
                    url: '<%=viewReleaseURL%>',
                    data: {
                        '<portlet:namespace/><%=PortalConstants.WHAT%>': what,
                        '<portlet:namespace/><%=PortalConstants.WHERE%>': where
                    },
                    success: function (data) {
                        callback(data);

                        $dialog.$.find('.spinner').hide();
                        $dialog.$.find('#releaseSearchResultsTable').show();
                        $dialog.$.find('#searchbuttonrelease').prop('disabled', false);
                        $dialog.$.find('#linkedReleasesButton').prop('disabled', false);
                    },
                    error: function() {
                        $dialog.alert('<liferay-ui:message key="cannot.link.to.release" />');
                    }
                });
             }

            function addReleaseToTable(what, where, parentId, layer, mainLineState, releaseRelation, callback){
                jQuery.ajax({
                    type: 'POST',
                    url: '<%=viewReleaseURL%>',
                    data: {
                        '<portlet:namespace/><%=PortalConstants.WHAT%>': what,
                        '<portlet:namespace/><%=PortalConstants.WHERE%>': where,
                        '<portlet:namespace/><%=PortalConstants.PARENT_BRANCH_ID%>': parentId,
                        '<portlet:namespace/><%=PortalConstants.LAYER%>': layer,
                        '<portlet:namespace/><%=PortalConstants.MAINLINE_STATE%>': mainLineState,
                        '<portlet:namespace/><%=PortalConstants.RELEASE_RELATION_SHIP%>': releaseRelation
                    },
                    success: function (data) {
                        callback(data);
                    },
                    error: function() {
                        $dialog.alert('<liferay-ui:message key="cannot.link.to.release" />');
                    }
                });
            }

            function makeReleaseViewUrl(releaseId) {
                return homeUrl + '/components/-/component/release/detailRelease/' + releaseId;
            }

            function makeComponentViewUrl(componentId) {
                return homeUrl + '/components/-/component/detail/' + componentId;
            }

            function detailUrl(name, url)
            {
                let viewUrl = $("<a></a>").attr("href",url).attr("target","_blank").css("word-break","break-word").text(name);
                return viewUrl[0].outerHTML;
            }


            function addLinkToReleaseNameAndVersion() {
                $('#releaseSearchResultsTable > tbody  > tr').each(function() {
                    let $releasId = $('td:eq(0)', this).find("input[type='checkbox']").val();
                    let $componentId = $('td:eq(0)', this).find("input[type='hidden']").val();
                    let $relName = $('td:eq(2)', this);
                    let $relVersion = $('td:eq(3)', this);
                    let linkOnRelName = detailUrl($relName.text(), makeComponentViewUrl($componentId));
                    let linkOnRelVersion = detailUrl($relVersion.text(), makeReleaseViewUrl($releasId));
                    $relName.html(linkOnRelName);
                    $relVersion.html(linkOnRelVersion);
             });
            }
        });
    });
</script>
